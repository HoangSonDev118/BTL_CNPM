generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  phone        String?
  passwordHash String
  createdAt    DateTime   @default(now())
  role         Role       @default(USER)
  reviews      Review[]
  orders       Order[]
  favorites    Favorite[] // Thêm relation này
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  books       Book[]
}

model Author {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  biography String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]
}

model Book {
  id            String      @id @default(uuid())
  title         String
  slug          String      @unique
  description   String?
  price         Decimal     @db.Decimal(10, 2)
  originalPrice Decimal?    @db.Decimal(10, 2)
  stock         Int         @default(0)
  publishYear   Int?
  publisher     String?
  pages         Int?
  language      String      @default("vi")
  isbn          String?     @unique
  coverImage    String?
  isActive      Boolean     @default(true)
  isFeatured    Boolean     @default(false)
  viewCount     Int         @default(0)
  soldCount     Int         @default(0)
  authorId      String
  categoryId    String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  author        Author      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  images        BookImage[]
  reviews       Review[]
  orderItems    OrderItem[]
  favorites     Favorite[]  // Thêm relation này

  @@index([slug])
  @@index([categoryId])
  @@index([authorId])
  @@index([isActive])
  @@index([isFeatured])
}

model BookImage {
  id        String   @id @default(uuid())
  url       String
  alt       String?
  order     Int      @default(0)
  bookId    String
  createdAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([bookId])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  
  @@unique([bookId, userId])
  @@index([bookId])
  @@index([userId])
  @@map("reviews")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  @@unique([userId, bookId])
  @@index([userId])
  @@index([bookId])
  @@map("favorites")
}

model Order {
  id               String        @id @default(uuid())
  userId           String
  customerName     String
  customerEmail    String
  customerPhone    String
  shippingAddress  String
  shippingCity     String
  shippingDistrict String
  shippingWard     String
  note             String?
  paymentMethod    PaymentMethod @default(COD)
  status           OrderStatus   @default(pending)
  subtotal         Decimal       @db.Decimal(10, 2)
  shippingFee      Decimal       @default(0) @db.Decimal(10, 2)
  total            Decimal       @db.Decimal(10, 2)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  bookId    String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book  Book  @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@index([bookId])
}

enum Role {
  USER
  STAFF
  SUPER_ADMIN
}

enum OrderStatus {
  pending
  confirmed
  shipping
  completed
  cancelled
}

enum PaymentMethod {
  COD
  BANK_TRANSFER
  VNPAY
  MOMO
}