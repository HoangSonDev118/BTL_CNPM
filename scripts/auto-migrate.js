const { execSync } = require("child_process");
const fs = require("fs");
const path = require("path");

/**
 * Script t·ª± ƒë·ªông ch·∫°y migrations
 * - Ki·ªÉm tra k·∫øt n·ªëi DB
 * - Ki·ªÉm tra t√¨nh tr·∫°ng migrations
 * - Baseline n·∫øu DB kh√¥ng tr·ªëng
 * - Deploy migrations m·ªõi
 * - Generate Prisma Client
 */

const MIGRATIONS_DIR = path.join(__dirname, "..", "prisma", "migrations");
const SCHEMA_PATH = path.join(__dirname, "..", "prisma", "schema.prisma");

function runCommand(command, options = {}) {
  try {
    console.log(`\nüîÑ Ch·∫°y l·ªánh: ${command}`);
    const output = execSync(command, {
      encoding: "utf-8",
      stdio: "pipe",
      ...options,
    });
    console.log(output);
    return { success: true, output };
  } catch (error) {
    return {
      success: false,
      error: error.message,
      stderr: error.stderr?.toString() || "",
      stdout: error.stdout?.toString() || "",
    };
  }
}

function getMigrationFolders() {
  if (!fs.existsSync(MIGRATIONS_DIR)) {
    console.log("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c migrations");
    return [];
  }
  return fs
    .readdirSync(MIGRATIONS_DIR)
    .filter((file) => {
      const fullPath = path.join(MIGRATIONS_DIR, file);
      return fs.statSync(fullPath).isDirectory() && file !== "migration_lock.toml";
    })
    .sort();
}

async function main() {
  console.log("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
  console.log("‚ïë   üöÄ B·∫Øt ƒë·∫ßu quy tr√¨nh Auto Migration     ‚ïë");
  console.log("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");

  // B·ªè qua migrate khi ch·∫°y trong Vercel build (ho·∫∑c khi set c·ªù SKIP_DB_MIGRATION)
  if (process.env.VERCEL === "1" || process.env.SKIP_DB_MIGRATION === "true") {
    console.log("‚ö†Ô∏è  ƒêang ch·∫°y trong m√¥i tr∆∞·ªùng build c·ªßa Vercel");
    console.log("‚è≠Ô∏è  B·ªè qua b∆∞·ªõc migrate database...");
    console.log("üí° Sau khi deploy xong h√£y ch·∫°y migrate th·ªß c√¥ng\n");

    console.log("üî® ƒêang generate Prisma Client...");
    const generateResult = runCommand(`npx prisma generate --schema="${SCHEMA_PATH}"`);

    if (generateResult.success) {
      console.log("‚úÖ Generate Prisma Client th√†nh c√¥ng!\n");
      console.log("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
      console.log("‚ïë   üéâ Build ho√†n t·∫•t                        ‚ïë");
      console.log("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");
      return;
    } else {
      console.error("‚ùå Generate Prisma Client th·∫•t b·∫°i");
      console.error("L·ªói:", generateResult.stderr);
      process.exit(1);
    }
  }

  // 1) Ki·ªÉm tra t·ªìn t·∫°i schema
  if (!fs.existsSync(SCHEMA_PATH)) {
    console.error("‚ùå Kh√¥ng t√¨m th·∫•y file schema t·∫°i:", SCHEMA_PATH);
    process.exit(1);
  }

  // 2) Test k·∫øt n·ªëi DB
  console.log("üì° B∆Ø·ªöC 1: Ki·ªÉm tra k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu...");
  const connectionTest = runCommand(`npx prisma db execute --schema="${SCHEMA_PATH}" --stdin`, {
    input: "SELECT 1;",
  });

  if (!connectionTest.success) {
    console.log("‚ö†Ô∏è  Test k·∫øt n·ªëi tr·ª±c ti·∫øp th·∫•t b·∫°i, th·ª≠ validate schema...");
    const validateResult = runCommand(`npx prisma validate --schema="${SCHEMA_PATH}"`);

    if (!validateResult.success) {
      console.error("\n‚ùå Validate schema th·∫•t b·∫°i!");
      console.error("üí° Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng DATABASE_URL trong file .env");
      console.error('\nƒê·ªãnh d·∫°ng g·ª£i √Ω:');
      console.error('DATABASE_URL="postgresql://postgres:YOUR_PASSWORD@db.xxx.supabase.co:5432/postgres"');
      console.error("\n‚ö†Ô∏è  Ghi ch√∫: n·∫øu c·ªïng 5432 b·ªã ch·∫∑n, h√£y th·ª≠ b·∫≠t VPN ho·∫∑c m·ªü c·ªïng");
      process.exit(1);
    }
    console.log("‚úÖ Schema h·ª£p l·ªá");
  } else {
    console.log("‚úÖ K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu OK");
  }
  console.log("");

  // 3) Ki·ªÉm tra tr·∫°ng th√°i migrations
  console.log("üìã B∆Ø·ªöC 2: Ki·ªÉm tra tr·∫°ng th√°i migrations...");
  const statusResult = runCommand(`npx prisma migrate status --schema="${SCHEMA_PATH}"`);

  const statusOutput = statusResult.stdout || "";
  const statusError = statusResult.stderr || "";

  if (statusOutput.includes("Database schema is not empty") || statusError.includes("P3005")) {
    console.log("\n‚ö†Ô∏è  Database kh√¥ng tr·ªëng. C·∫ßn baseline...\n");

    const migrations = getMigrationFolders();

    if (migrations.length === 0) {
      console.log("‚úÖ Kh√¥ng c√≥ migration n√†o c·∫ßn x·ª≠ l√Ω\n");
    } else {
      console.log(`üì¶ T√¨m th·∫•y ${migrations.length} migration:`);
      migrations.forEach((m, i) => console.log(`   ${i + 1}. ${m}`));
      console.log("");

      // Mark t·∫•t c·∫£ migration hi·ªán c√≥ l√† "ƒë√£ √°p d·ª•ng"
      for (const migration of migrations) {
        console.log(`üîß ƒê√°nh d·∫•u ƒë√£ √°p d·ª•ng: ${migration}`);
        const resolveResult = runCommand(
          `npx prisma migrate resolve --applied "${migration}" --schema="${SCHEMA_PATH}"`
        );

        if (resolveResult.success) {
          console.log(`   ‚úÖ ${migration} ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u`);
        } else {
          if (
            resolveResult.stderr.includes("already been applied") ||
            resolveResult.stdout.includes("already been applied")
          ) {
            console.log(`   ‚è≠Ô∏è  ${migration} ƒë√£ √°p d·ª•ng tr∆∞·ªõc ƒë√≥, b·ªè qua`);
          } else {
            console.error(`   ‚ùå Kh√¥ng th·ªÉ resolve ${migration}`);
            console.error("   L·ªói:", resolveResult.stderr || resolveResult.error);
          }
        }
      }
      console.log("");
    }
  } else if (
    statusOutput.includes("No pending migrations") ||
    statusOutput.includes("Database schema is up to date")
  ) {
    console.log("‚úÖ Database ƒë√£ kh·ªõp schema, kh√¥ng c√≤n pending migrations!\n");
  } else if (statusOutput.includes("pending migration")) {
    console.log("‚ö†Ô∏è  C√≥ migrations ƒëang ch·ªù √°p d·ª•ng\n");
  }

  // 4) Deploy migrations
  console.log("üì§ B∆Ø·ªöC 3: Deploy migrations...");
  const deployResult = runCommand(`npx prisma migrate deploy --schema="${SCHEMA_PATH}"`);

  const deployOutput = deployResult.stdout || "";
  const deployError = deployResult.stderr || "";

  if (deployResult.success) {
    console.log("‚úÖ Deploy migrations th√†nh c√¥ng!\n");
  } else {
    if (deployOutput.includes("No pending migrations") || deployError.includes("No pending migrations")) {
      console.log("‚úÖ Kh√¥ng c√≥ migration m·ªõi ƒë·ªÉ deploy\n");
    } else {
      console.error("‚ùå Deploy migrations th·∫•t b·∫°i");
      console.error("L·ªói:", deployError || deployResult.error);

      if (deployError.includes("Can't reach database") || deployError.includes("Connection refused")) {
        console.error("\nüí° G·ª£i √Ω kh·∫Øc ph·ª•c:");
        console.error("   1) Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng / VPN (c·ªïng 5432 c√≥ th·ªÉ b·ªã ch·∫∑n)");
        console.error("   2) Ki·ªÉm tra bi·∫øn DATABASE_URL trong .env");
        console.error("   3) ƒê·∫£m b·∫£o database server ƒëang ch·∫°y");
      }

      process.exit(1);
    }
  }

  // 5) Generate Prisma Client
  console.log("üî® B∆Ø·ªöC 4: Generate Prisma Client...");
  const generateResult = runCommand(`npx prisma generate --schema="${SCHEMA_PATH}"`);

  if (generateResult.success) {
    console.log("‚úÖ Generate Prisma Client th√†nh c√¥ng!\n");
  } else {
    console.error("‚ùå Generate Prisma Client th·∫•t b·∫°i");
    console.error("L·ªói:", generateResult.stderr);
    process.exit(1);
  }

  console.log("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
  console.log("‚ïë   üéâ Quy tr√¨nh Migration ƒë√£ ho√†n t·∫•t!     ‚ïë");
  console.log("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");
}

main().catch((error) => {
  console.error("\n‚ùå L·ªói kh√¥ng mong mu·ªën trong qu√° tr√¨nh migration:", error);
  process.exit(1);
});
