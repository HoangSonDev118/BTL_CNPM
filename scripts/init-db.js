const crypto = require("crypto");
const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

function hashPassword(password, salt) {
  const usedSalt = salt ?? crypto.randomBytes(16).toString("hex");
  const derived = crypto.pbkdf2Sync(password, usedSalt, 150000, 64, "sha512").toString("hex");
  return `${usedSalt}:${derived}`;
}

async function main() {
  console.log(" Kh·ªüi t·∫°o c·∫•u tr√∫c DB c∆° b·∫£n (User, Role)...\n");

  // B·∫≠t extension c·∫ßn thi·∫øt (n·∫øu c√≥)
  await prisma.$executeRawUnsafe('CREATE EXTENSION IF NOT EXISTS "pgcrypto";');
  console.log("‚úÖ ƒê√£ b·∫≠t/ki·ªÉm tra extension pgcrypto");

  // T·∫°o enum Role n·∫øu ch∆∞a c√≥
  await prisma.$executeRawUnsafe(`
    DO $$
    BEGIN
      IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'Role') THEN
        CREATE TYPE "Role" AS ENUM ('USER', 'STAFF', 'SUPER_ADMIN');
      END IF;
    END $$;
  `);
  console.log("‚úÖ Enum \"Role\" ƒë√£ s·∫µn s√†ng");

  // T·∫°o b·∫£ng User n·∫øu ch∆∞a c√≥
  await prisma.$executeRawUnsafe(`
    CREATE TABLE IF NOT EXISTS "User" (
      "id" TEXT NOT NULL PRIMARY KEY,
      "name" TEXT NOT NULL,
      "email" TEXT NOT NULL,
      "phone" TEXT,
      "passwordHash" TEXT NOT NULL,
      "role" "Role" NOT NULL DEFAULT 'USER',
      "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP
    );
  `);
  console.log("‚úÖ B·∫£ng \"User\" ƒë√£ s·∫µn s√†ng");

  // Unique index cho email
  await prisma.$executeRawUnsafe(
    'CREATE UNIQUE INDEX IF NOT EXISTS "User_email_key" ON "User"("email");'
  );
  console.log("‚úÖ Unique index cho email ƒë√£ s·∫µn s√†ng");

  // ƒê·∫£m b·∫£o c·ªôt role ƒë√∫ng ki·ªÉu/DEFAULT/NOT NULL
  await prisma.$executeRawUnsafe(
    `ALTER TABLE "User" ADD COLUMN IF NOT EXISTS "role" "Role" NOT NULL DEFAULT 'USER';`
  );
  await prisma.$executeRawUnsafe(
    `ALTER TABLE "User" ALTER COLUMN "role" TYPE "Role" USING "role"::"Role";`
  );
  await prisma.$executeRawUnsafe(
    `ALTER TABLE "User" ALTER COLUMN "role" SET DEFAULT 'USER';`
  );
  await prisma.$executeRawUnsafe(
    `ALTER TABLE "User" ALTER COLUMN "role" SET NOT NULL;`
  );
  console.log("‚úÖ C·ªôt \"role\" ƒë∆∞·ª£c ƒë·∫£m b·∫£o ƒë√∫ng c·∫•u h√¨nh");

  // Seed Super Admin m·∫∑c ƒë·ªãnh
  const defaultSuperAdmin = {
    email: "ndt060402004@gmail.com",
    name: "Default Super Admin",
    passwordHash: hashPassword("123"),
  };

  await prisma.user.upsert({
    where: { email: defaultSuperAdmin.email },
    update: {
      name: defaultSuperAdmin.name,
      passwordHash: defaultSuperAdmin.passwordHash,
      role: "SUPER_ADMIN",
    },
    create: {
      name: defaultSuperAdmin.name,
      email: defaultSuperAdmin.email,
      passwordHash: defaultSuperAdmin.passwordHash,
      role: "SUPER_ADMIN",
    },
  });

  console.log("‚úÖ Super Admin m·∫∑c ƒë·ªãnh ƒë√£ ƒë∆∞·ª£c ƒë·∫£m b·∫£o t·ªìn t·∫°i (email: ndt060402004@gmail.com)\n");
  console.log("üéâ Kh·ªüi t·∫°o DB ho√†n t·∫•t!\n");
}

main().catch((e) => {
  console.error("‚ùå L·ªói khi kh·ªüi t·∫°o DB:", e);
  process.exit(1);
});
